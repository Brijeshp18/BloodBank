{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brije\\\\OneDrive\\\\Desktop\\\\Blood Bank\\\\client\\\\src\\\\pages\\\\Login\\\\Otpform.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OTPForm = () => {\n  _s();\n  const [countdown, setCountdown] = useState(60); // Initial countdown time in seconds\n  const [isResendDisabled, setIsResendDisabled] = useState(false);\n  useEffect(() => {\n    // Start the countdown timer when the component mounts\n    let timer;\n    if (countdown > 0) {\n      timer = setInterval(() => {\n        setCountdown(prevCountdown => prevCountdown - 1);\n      }, 1000);\n    } else {\n      setIsResendDisabled(false); // Enable the resend button when the countdown reaches 0\n    }\n\n    // Clean up the timer when the component unmounts or when the countdown reaches 0\n    return () => {\n      clearInterval(timer);\n    };\n  }, [countdown]);\n\n  // const onFinish = (values) => {\n  //   // Handle OTP submission here, e.g., send data to the server\n  // };\n\n  const handleResendOTP = () => {\n    // Handle OTP resend logic here\n    // Disable the resend button and reset the countdown timer\n    setIsResendDisabled(true);\n    setCountdown(60); // Reset the countdown to 60 seconds\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Phone number\",\n      name: \"phone\",\n      normalize: value => value.trim(),\n      rules: [{\n        required: true,\n        message: \"please enter your phone number\"\n      }, {\n        min: 10\n      }, {\n        max: 10\n      }],\n      hasFeedback: true,\n      children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"otp\",\n      label: \"OTP\",\n      rules: [{\n        required: true,\n        message: \"Please input your OTP\"\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleResendOTP,\n      disabled: isResendDisabled,\n      className: \"p-1\",\n      classNames: \"bg-warning\",\n      children: isResendDisabled ? `Resend OTP in ${countdown} seconds` : \"Resend OTP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n_s(OTPForm, \"S448EgGTjWIAeHp3mgHhKAeGj1Y=\");\n_c = OTPForm;\nexport default OTPForm;\nvar _c;\n$RefreshReg$(_c, \"OTPForm\");","map":{"version":3,"names":["React","useState","useEffect","Form","Input","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","OTPForm","_s","countdown","setCountdown","isResendDisabled","setIsResendDisabled","timer","setInterval","prevCountdown","clearInterval","handleResendOTP","children","Item","label","name","normalize","value","trim","rules","required","message","min","max","hasFeedback","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","className","classNames","_c","$RefreshReg$"],"sources":["C:/Users/brije/OneDrive/Desktop/Blood Bank/client/src/pages/Login/Otpform.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\n\r\nconst OTPForm = () => {\r\n  const [countdown, setCountdown] = useState(60); // Initial countdown time in seconds\r\n  const [isResendDisabled, setIsResendDisabled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Start the countdown timer when the component mounts\r\n    let timer;\r\n    if (countdown > 0) {\r\n      timer = setInterval(() => {\r\n        setCountdown((prevCountdown) => prevCountdown - 1);\r\n      }, 1000);\r\n    } else {\r\n      setIsResendDisabled(false); // Enable the resend button when the countdown reaches 0\r\n    }\r\n\r\n    // Clean up the timer when the component unmounts or when the countdown reaches 0\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [countdown]);\r\n\r\n  // const onFinish = (values) => {\r\n  //   // Handle OTP submission here, e.g., send data to the server\r\n  // };\r\n\r\n  const handleResendOTP = () => {\r\n    // Handle OTP resend logic here\r\n    // Disable the resend button and reset the countdown timer\r\n    setIsResendDisabled(true);\r\n    setCountdown(60); // Reset the countdown to 60 seconds\r\n  };\r\n\r\n  return (\r\n    <\r\n    >\r\n      <Form.Item\r\n        label=\"Phone number\"\r\n        name=\"phone\"\r\n        normalize={(value) => value.trim()}\r\n        rules={[\r\n          { required: true, message: \"please enter your phone number\" },\r\n          { min: 10 },{max:10}\r\n        ]}\r\n        hasFeedback\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"otp\"\r\n        label=\"OTP\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your OTP\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n    \r\n          {/* <Button type=\"primary\" htmlType=\"submit\">\r\n            Verify OTP\r\n          </Button> */}\r\n      \r\n          <Button onClick={handleResendOTP} disabled={isResendDisabled}  className=\"p-1\"  classNames=\"bg-warning\">\r\n            {isResendDisabled\r\n              ? `Resend OTP in ${countdown} seconds`\r\n              : \"Resend OTP\"}\r\n          </Button>\r\n    \r\n    </>\r\n  );\r\n};\r\n\r\nexport default OTPForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,KAAK,EAAEC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE/DC,SAAS,CAAC,MAAM;IACd;IACA,IAAIc,KAAK;IACT,IAAIJ,SAAS,GAAG,CAAC,EAAE;MACjBI,KAAK,GAAGC,WAAW,CAAC,MAAM;QACxBJ,YAAY,CAAEK,aAAa,IAAKA,aAAa,GAAG,CAAC,CAAC;MACpD,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM;MACLH,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9B;;IAEA;IACA,OAAO,MAAM;MACXI,aAAa,CAACH,KAAK,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;;EAEf;EACA;EACA;;EAEA,MAAMQ,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA;IACAL,mBAAmB,CAAC,IAAI,CAAC;IACzBF,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;EACpB,CAAC;;EAED,oBACEN,OAAA,CAAAE,SAAA;IAAAY,QAAA,gBAEEd,OAAA,CAACJ,IAAI,CAACmB,IAAI;MACRC,KAAK,EAAC,cAAc;MACpBC,IAAI,EAAC,OAAO;MACZC,SAAS,EAAGC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAAE;MACnCC,KAAK,EAAE,CACL;QAAEC,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAiC,CAAC,EAC7D;QAAEC,GAAG,EAAE;MAAG,CAAC,EAAC;QAACC,GAAG,EAAC;MAAE,CAAC,CACpB;MACFC,WAAW;MAAAZ,QAAA,eAEXd,OAAA,CAACH,KAAK;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACZ9B,OAAA,CAACJ,IAAI,CAACmB,IAAI;MACRE,IAAI,EAAC,KAAK;MACVD,KAAK,EAAC,KAAK;MACXK,KAAK,EAAE,CACL;QACEC,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;MACX,CAAC,CACD;MAAAT,QAAA,eAEFd,OAAA,CAACH,KAAK;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAMR9B,OAAA,CAACF,MAAM;MAACiC,OAAO,EAAElB,eAAgB;MAACmB,QAAQ,EAAEzB,gBAAiB;MAAE0B,SAAS,EAAC,KAAK;MAAEC,UAAU,EAAC,YAAY;MAAApB,QAAA,EACpGP,gBAAgB,GACZ,iBAAgBF,SAAU,UAAS,GACpC;IAAY;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA,eAEb,CAAC;AAEP,CAAC;AAAC1B,EAAA,CAxEID,OAAO;AAAAgC,EAAA,GAAPhC,OAAO;AA0Eb,eAAeA,OAAO;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}