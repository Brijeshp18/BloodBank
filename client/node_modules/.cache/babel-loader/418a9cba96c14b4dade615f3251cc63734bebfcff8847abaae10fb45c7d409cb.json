{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brije\\\\Documents\\\\bloodbankgit\\\\BloodBank\\\\client\\\\src\\\\pages\\\\Register\\\\Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, Form, Input, Radio, message } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport Hospital from \"./Hospital\";\nimport { RegisterUser } from \"../../Apicall/users\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Register() {\n  _s();\n  const [type, settype] = useState(\"donor\");\n  const [form] = Form.useForm();\n  form.setFieldsValue({});\n  const onFinish = async values => {\n    console.log(\"form datas\", values);\n    try {\n      const response = await RegisterUser({\n        ...values,\n        userType: type\n      });\n      if (response.success) {\n        message.success(response.message);\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      message.error(error.message);\n    }\n  };\n  form.resetFields();\n  const onFinishFailed = errorInfo => {\n    // Handle form validation failures\n    console.log(\"Failed:\", errorInfo);\n  };\n  const validateIt = (_, value) => {\n    // You can customize this validation logic based on your requirements\n    // For example, you can use regular expressions or other rules\n    if (!/^\\d{10}$/.test(value)) {\n      return Promise.reject('Please enter a valid 10-digit phone number');\n    }\n    return Promise.resolve();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bgc\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Register, \"U5XJlSidhVz3kQjeraCKhWFcHYg=\", false, function () {\n  return [Form.useForm];\n});\n_c = Register;\n/*#__PURE__*/_jsxDEV(\"span\", {\n  style: {\n    color: 'red'\n  },\n  children: \"Login\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 47,\n  columnNumber: 2\n}, this);\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","Button","Form","Input","Radio","message","Link","Hospital","RegisterUser","jsxDEV","_jsxDEV","Register","_s","type","settype","form","useForm","setFieldsValue","onFinish","values","console","log","response","userType","success","Error","error","resetFields","onFinishFailed","errorInfo","validateIt","_","value","test","Promise","reject","resolve","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","style","color","children","$RefreshReg$"],"sources":["C:/Users/brije/Documents/bloodbankgit/BloodBank/client/src/pages/Register/Register.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Form, Input, Radio, message } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Hospital from \"./Hospital\";\r\nimport { RegisterUser } from \"../../Apicall/users\";\r\n\r\n\r\nfunction Register() {\r\n  const [type, settype] = useState(\"donor\");\r\n  const [form] = Form.useForm();\r\n  form.setFieldsValue({});\r\n  const onFinish = async(values) => {\r\n    console.log(\"form datas\", values);\r\n    try {\r\n        const response= await RegisterUser({...values, userType:type})\r\n        if(response.success){\r\n        message.success(response.message)\r\n        }\r\n        else {\r\n            throw new Error(response.message)\r\n        }  \r\n    } catch (error) {\r\n        message.error(error.message)\r\n    }\r\n  };\r\n  form.resetFields();\r\n  const onFinishFailed = (errorInfo) => {\r\n    // Handle form validation failures\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n  const validateIt = (_, value) => {\r\n    // You can customize this validation logic based on your requirements\r\n    // For example, you can use regular expressions or other rules\r\n    if (!/^\\d{10}$/.test(value)) {\r\n      return Promise.reject('Please enter a valid 10-digit phone number');\r\n    }\r\n    return Promise.resolve();\r\n  };\r\n\r\n  \r\n \r\n  return (\r\n    <div className=\"bgc\">\r\n  \r\n    </div>\r\n  );\r\n}<span style={{color:'red'}}>Login</span>\r\n\r\nexport default Register;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,QAAQ,MAAM;AAC1D,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,YAAY,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,OAAO,CAAC;EACzC,MAAM,CAACe,IAAI,CAAC,GAAGb,IAAI,CAACc,OAAO,CAAC,CAAC;EAC7BD,IAAI,CAACE,cAAc,CAAC,CAAC,CAAC,CAAC;EACvB,MAAMC,QAAQ,GAAG,MAAMC,MAAM,IAAK;IAChCC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,MAAM,CAAC;IACjC,IAAI;MACA,MAAMG,QAAQ,GAAE,MAAMd,YAAY,CAAC;QAAC,GAAGW,MAAM;QAAEI,QAAQ,EAACV;MAAI,CAAC,CAAC;MAC9D,IAAGS,QAAQ,CAACE,OAAO,EAAC;QACpBnB,OAAO,CAACmB,OAAO,CAACF,QAAQ,CAACjB,OAAO,CAAC;MACjC,CAAC,MACI;QACD,MAAM,IAAIoB,KAAK,CAACH,QAAQ,CAACjB,OAAO,CAAC;MACrC;IACJ,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACZrB,OAAO,CAACqB,KAAK,CAACA,KAAK,CAACrB,OAAO,CAAC;IAChC;EACF,CAAC;EACDU,IAAI,CAACY,WAAW,CAAC,CAAC;EAClB,MAAMC,cAAc,GAAIC,SAAS,IAAK;IACpC;IACAT,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEQ,SAAS,CAAC;EACnC,CAAC;EACD,MAAMC,UAAU,GAAGA,CAACC,CAAC,EAAEC,KAAK,KAAK;IAC/B;IACA;IACA,IAAI,CAAC,UAAU,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE;MAC3B,OAAOE,OAAO,CAACC,MAAM,CAAC,4CAA4C,CAAC;IACrE;IACA,OAAOD,OAAO,CAACE,OAAO,CAAC,CAAC;EAC1B,CAAC;EAID,oBACE1B,OAAA;IAAK2B,SAAS,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEf,CAAC;AAEV;AAAC7B,EAAA,CAvCQD,QAAQ;EAAA,QAEAT,IAAI,CAACc,OAAO;AAAA;AAAA0B,EAAA,GAFpB/B,QAAQ;AAuChB,aAAAD,OAAA;EAAMiC,KAAK,EAAE;IAACC,KAAK,EAAC;EAAK,CAAE;EAAAC,QAAA,EAAC;AAAK;EAAAP,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAM,CAAC;AAEzC,eAAe9B,QAAQ;AAAC,IAAA+B,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}